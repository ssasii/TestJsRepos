//remove duplicate

var arr = ['apple', 'mango', 'apple', 'orange', 'mango', 'mango'];

const removeDuplicate = (arr) =>
  arr.filter((ele, index) => arr.indexOf(ele) === index);

const anotherWayToFindDuplicate = (arr) => [...new Set(arr)];

console.log(removeDuplicate(arr), anotherWayToFindDuplicate(arr));

//string Reverse

const stringReverse = (str) => str.split('').reverse().join('');

console.log(stringReverse('welcome to string'));

//call by value / call by reference || deep and shallow copy

//call by value = string, number
// The original variable is not modified on changes in other variables.
// Actual and copied variables will be created in different memory locations.

let initial = 6;

let updateInitial = initial;

updateInitial = 7;

console.log(initial, updateInitial);

//callbyRef => obj, arr

let a = {
  name: 'sasi',
};

console.log(a);

let b = a;
b.name = 'harish';

console.log(a, b);

//pure and impure function

//output should not be dependent on an external variable

const pureFunction = (x) => x * 10;

console.log(pureFunction(10));

//impure

let aaa = 10;

const impure = (x) => {
  return aaa + x;
};

console.log(impure(80));

//callback

const firstFunction = (name) => console.log(`hello ${name}`);

const secondFunction = (ele) => {
  let nameProperty = 'sasi';
  return (ele = nameProperty);
};

console.log(secondFunction(firstFunction));

// 2d arry to 1d array

let dArray = [1, 2, 3, [4, 5], 6, (7)[8.9]];

const oneDArray = [...new Set(dArray.flat())];

console.log(oneDArray);

//generator function

//normal function we have to return the values and in generator function using the yield it  will return the value
//generator is a function which returns an object on which you can call next()

function* generatorFunction(i) {
  yield i;
  yield i + 10;
}

let getValue = generatorFunction(10);

console.log(getValue.next(), getValue.next());

//closure

//child func can access the parent func variables

const parentFunction = () => {
  let a = 'sasi';
  const childFunc = () => console.log(`welcome ${a} to the team`);
  childFunc();
};

parentFunction();

//IIFE = immediate invoked function expression

//function that resturns as soon as it is defined.

(function () {
  return console.log('welcome to the team');
})();

//event looping

// Mechanism that allows the JS to runs the non-blocking opeartions when the asynchronous function is stored

// async calls will go to call stack and will wait till all the sync call end

console.log('first');

setTimeout(() => {
  console.log('two');
}, 1000);

console.log('three');

setTimeout(() => {
  console.log('four');
}, 2000);

//Recursive
// a function will call inside the function is recursive and it need a condition to stop the function else it will keep on looping

function recursive(a) {
  if (a > 10) return a;
  console.log(a);
  recursive(a + 1);
}

recursive(1);

//currying

// it will the transform the multiple arguments into several functions and arguments

//ex for currying
const add = (a) => (b) => (c) => a + b + c;

//ex for normal
const addToNormal = (a, b, c) => a + b + c;

console.log(add(1)(1)(3), addToNormal(1, 2, 4));

/swap numbers
let a = 5,
  b = 8;

[a, b] = [b, a];

a = a + b;
b = a - b;
a = a - b;

console.log(a, b);

//reverse array
const reverseArr = (arr) =>
  arr.map((el, index, initial) => {
    return initial[initial.length - index - 1];
  });

console.log(reverseArr([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5].reverse());

//sort arr
const sortArr = (arr) =>
  arr.sort((a, b) => {
    return b - a;
  });

console.log(sortArr([1, 2, 3, 4, 5]));


//flat array
const flatten = (array) =>
  array.reduce(
    (acc, val) => acc.concat(Array.isArray(val) ? flatten(val) : val),
    []
  );

console.log(flatten([1, 2, [3, 4, [5]]]));

//throttle and debounce - https://medium.com/nerd-for-tech/debouncing-throttling-in-javascript-d36ace200cea

//duplicate
const array = ['a', 'a', 'b'];
const result = {};

for (let i = 0; i < array.length; i++) {
  result[array[i]] = (result[array[i]] || 0) + 1;
}

//flat
const flatten = (array) => array.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatten(val) : val), []);

//currying
const sum = (a) => {
  return (b) => {
    if (b) return sum(a + b);
    return a;
  };
};

const sumResult = sum(1)(2)(3)(4)(5)();
console.log(sumResult); // 15
